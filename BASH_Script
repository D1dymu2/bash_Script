##  BASH script on Ubuntu 24.04 LTS terminal to automate build of Django app in Docker Container
##  move to home folder
cd ~
##  remove folder beginning with ymmot
rm -r ymmot*
alias py=python3
## create the python virtual environment and working directories
mkdir ~/.venvs
py -m venv ~/.venvs/venv312
mkdir ymmot101 && cd ymmot101
mkdir django-on-docker && cd django-on-docker
mkdir app && cd app
## activate, update and load modules
source ~/.venvs/venv312/bin/activate
py -m pip install pip --upgrade
pip install django==4.2.*
##  create the Django app, superuser and migrate
django-admin startproject hello_django .
py -m manage migrate
echo "from django.contrib.auth.models import User; User.objects.create_superuser('tommy', 'tommy@frm.dm', 'admin')" | python manage.py shell
##  access the Django Admin UI successfully

py -m manage runserver &
x-www-browser 127.0.0.1:8000/admin/



##  close the browser to continue
##  close the port if open and deactivate the virtual env
##  remove the virtual env
##  write the requirements.txt file
sudo pkill -f runserver
deactivate
rm -r ~/.venvs/venv312/
rm db.sqlite3
echo Django==4.2.* >  requirements.txt
cd ../



##  create and write the docker-compose.yml to current directory
cat <<'END' > docker-compose.yml
##  version: '3.8'

services:
  web:
    build: ./app
    command:
      - sh
      - -cx
      - |
        python wait_for_db
        python manage.py migrate
        python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/:/usr/src/app/
    ports:
      - 8000:8000
    env_file:
      - ./.env.dev
    depends_on:
      - db
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django
      - POSTGRES_DB=hello_django_dev

volumes:
  postgres_data:
END


##  create and write the Docker file to app directory
cat <<'END' > app/Dockerfile
# pull official base image
FROM python:3.11.4-slim-buster

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install -r requirements.txt

# copy project
COPY . .
END



##  create and write the Env Vars to current directory
cat <<'END' > .env.dev
DEBUG=1
SECRET_KEY=foo
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
SQL_ENGINE=django.db.backends.postgresql
SQL_DATABASE=hello_django_dev
SQL_USER=hello_django
SQL_PASSWORD=hello_django
SQL_HOST=db
SQL_PORT=5432
DJANGO_SUPERUSER_EMAIL= tommy@frm.dm
DJANGO_SUPERUSER_USERNAME=tommy
DJANGO_SUPERUSER_PASSWORD=admin
END



##  rewrite app/hello_django/settings.py
##  add modules to import
##  add Env Vars references
##  add Postgres db
##  add Django logging
cat <<'END' > app/hello_django/settings.py
""" 
Django settings for hello_django project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
##  SECRET_KEY = 'django-insecure-4$bee(yo0z6tg73+t_wqtmu*wry8e1+k3n69*_l+)in3mk=(#q'
SECRET_KEY = os.environ.get("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
##  DEBUG = True
DEBUG = bool(os.environ.get("DEBUG", default=0))


##  ALLOWED_HOSTS = []
# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
] 
 
MIDDLEWARE = [ 
    'django.middleware.security.SecurityMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware', 
    'django.middleware.common.CommonMiddleware', 
    'django.middleware.csrf.CsrfViewMiddleware', 
    'django.contrib.auth.middleware.AuthenticationMiddleware', 
    'django.contrib.messages.middleware.MessageMiddleware', 
    'django.middleware.clickjacking.XFrameOptionsMiddleware', 
] 
 
ROOT_URLCONF = 'hello_django.urls' 
 
TEMPLATES = [ 
    { 
        'BACKEND': 'django.template.backends.django.DjangoTemplates', 
        'DIRS': [], 
        'APP_DIRS': True, 
        'OPTIONS': { 
            'context_processors': [ 
                'django.template.context_processors.debug', 
                'django.template.context_processors.request', 
                'django.contrib.auth.context_processors.auth', 
                'django.contrib.messages.context_processors.messages', 
            ], 
        }, 
    }, 
] 

WSGI_APPLICATION = 'hello_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

##  DATABASES = {
##      'default': {
##          'ENGINE': 'django.db.backends.sqlite3',
##          'NAME': BASE_DIR / 'db.sqlite3',
##      }
##  }


DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
 
TIME_ZONE = 'UTC' 
 
USE_I18N = True 
 
USE_TZ = True 
 
 
# Static files (CSS, JavaScript, Images) 
# https://docs.djangoproject.com/en/4.2/howto/static-files/ 
 
STATIC_URL = 'static/' 
 
# Default primary key field type 
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field 
 
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' 

# Create a LOGGING dictionary
LOGGING = {
    # Use v1 of the logging config schema
    'version': 1,
    # Continue to use existing loggers
    'disable_existing_loggers': False,
    # Add a verbose formatter
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    # Create a log handler that prints logs to the terminal
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            # Add the verbose formatter
            'formatter': 'verbose',
        },
        # Add a handler to write logs to a file
        'file': {
            # Use the FileHandler class
            'class': 'logging.FileHandler',
            # Specify a local log file as a raw string. Use your app's directory.
            'filename': r'./django.log',
        },
        'file_size_rotated': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'size_rotated_logs.log',
            'maxBytes': 1024,  # for example, 1 MB
            'backupCount': 3,  # keeps the last 3 log files around
            'formatter': 'verbose',
         },
    },
    # Define the root logger's settings
    'root': {
        # Use the console and file logger
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
    # Define the django log module's settings
    'loggers': {
        'django': {
            # Use the console and file logger
            'handlers': ['console', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': False,
        },
    },
}
END



##  update requirements.txt 
cat <<'END' > app/requirements.txt
Django==4.2.*
psycopg2-binary==2.9.*
END



##  run the following lines in the terminal on line at a time
sudo docker compose down -v
sudo docker compose up -d --build --remove-orphans
sudo docker compose exec web python manage.py migrate --noinput
sudo docker compose exec db psql --username=hello_django --dbname=hello_django_dev



##  in the Postgres terminal
\c hello_django_dev 
\dt
\q

##  Access the Django Admin UI
##  This seems to be where the script fails
x-www-browser 127.0.0.1:8000/admin/
