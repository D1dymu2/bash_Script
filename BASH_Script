##  BASH script on Ubuntu 24.04 LTS terminal to automate build of Django app in Docker Container
##  script assumes that Docker, Python3.12, Python3.12-venv, Postgres15 are installed

##  move to home folder
cd ~
##  kill server if running
sudo pkill -f runserver
##  remove folder beginning with ymmot
rm -r ymmot*
alias py=python3
## create the python virtual environment and working directories
mkdir ~/.venvs
py -m venv ~/.venvs/venv312
mkdir -p ymmot216/django-on-docker/app && cd ymmot216/django-on-docker/app
## activate, update and load modules
source ~/.venvs/venv312/bin/activate
py -m pip install pip --upgrade
pip install django==4.2.*
##  create the Django app, superuser and migrate
django-admin startproject hello_django .
py -m manage migrate
echo "from django.contrib.auth.models import User; User.objects.create_superuser('tommy', 'tommy@frm.dm', 'admin')" | python manage.py shell
##  access the Django Admin UI successfully
py -m manage runserver &
x-www-browser 127.0.0.1:8000/admin/



##  close the browser to continue
##  close the port if open and deactivate the virtual env
##  remove the virtual env
## stay in the app folder
sudo pkill -f runserver
deactivate
rm -r ~/.venvs/venv312/

cat <<'END' > requirements.txt
Django==4.2.*
psycopg2-binary==2.9.*
END



##  create and write the Docker file to app directory
cat << 'END' > Dockerfile
# pull official base image
FROM python:3.11.4-slim-buster

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN pip install --upgrade pip
COPY ./requirements.txt .
RUN pip install -r requirements.txt

# copy project
COPY . .
END



##  create and write the docker-compose.yml to current directory
cat << 'END' > ../docker-compose.yml
#  version: '3.8'

services:
  web:
    build: ./app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/:/usr/src/app/
    ports:
      - 8000:8000
    env_file:
      - ./.env.dev
END



##  rewrite app/hello_django/settings.py
##  add the modules to import
##  add Env Vars references
cat << 'END'> hello_django/settings.py

"""
Django settings for hello_django project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
##  SECRET_KEY = 'django-insecure-dw52+*-$r9yhwuq4--_j^!k+gm!jl1v^^lzfa0fo-7q25308(g'
SECRET_KEY = os.environ.get("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
##  DEBUG = True
DEBUG = bool(os.environ.get("DEBUG", default=0))


##  ALLOWED_HOSTS = []
# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hello_django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hello_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hello_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
END

##  add the Env Var file
cat << 'END' > ../.env.dev
DEBUG=1
SECRET_KEY=foo
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
END



sudo docker compose build
sudo docker compose up



##  Access the Django Admin UI
##  This seems to be working, though not as I had expected
in a browser: 127.0.0.1:8000/admin/
